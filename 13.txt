前情回顾

1. 网络消息传输过程
   tcp首部模型

2. 多任务编程

   多任务：在计算机中可以同时执行多个任务 （进程，线程）

   cpu : cpu如何支持任务执行

   并发和并行

3. 进程

   进程是一个过程，占有系统运行资源

   PID   进程状态  父子进程   孤儿进程  僵尸进程

   ps -aux    kill     pstree

4. multiprocessing

   p = Process()
   p.start()
   p.join()

   p.pid  p.name  p.is_alive()

   os.getpid()  os.getppid()  sys.exit()

练习1： 4个进程将100000分成4份，每个进程求其中一份的质数只和
       10个进程将100000分成10份，每个进程求其中一份的质数只和

练习２：　使用进程池完成
拷贝一个指定的目录　（目录下全都是普通文件没有子目录）　

os.mkdir("xxx")　创建一个文件夹
os.listdir() 遍历文件夹

将原目录加所有的文件，拷贝到新目录下即可　
把每个文件的拷贝作为一个要执行的事件，然后创建进程池开启４个进程执行这些文件拷贝事件


练习３：　在上一个练习的基础上完成，拷贝目录的同时，实时的显示拷贝进度，百分比
文件夹大小　＝　其中所有文件大小之和


群聊聊天室

需求分析 ： 干什么  原型
【1】 有人进入聊天室需要输入姓名，姓名不能重复

【2】 有人进入聊天室时，其他人会收到通知：xxx 进入了聊天室

【3】 一个人发消息，其他人会收到：xxx ： xxxxxxxxxxx

【4】 有人退出聊天室，则其他人也会收到通知:xxx退出了聊天室

技术分析 ： 1. 服务端需要存储聊天室用户  {name:address}
                                   [(name,address),]
                                class User:
                                    def __init__(self,name,address):
                                        self.name = name
                                        self.address = address

          2. 网络通信技术 ：  udp

          3. 消息发送 ： 使用转发机制

          4. 收发消息问题 ： 收发互不干扰 --》 使用不同的进程


功能模块分析

    函数封装

    整体结构的搭建
    进入聊天室
    聊天
    退出聊天室

通信协议分析

    网络通信协议： 让通信双方明白对方的数据含义

                请求类型    数据参量
    进入聊天室 ：    L        name

    聊天 ：         C        content

    退出聊天室 ：    Q



分模块具体逻辑梳理

    整体结构的搭建
       服务端：  1. 创建udp网络通信
               2. 准备循环接收客户端请求信息
               3. 根据请求，调用相关模块

       客户端： 1. 创建udp套接字


    进入聊天室
       客户端 ： 1. 输入用户名
               2. 发送用户名
               3. 等待结果
               4. 进入聊天室/ 重新输入姓名

       服务端 ： 1. 接收用户名
                2. 判断用户是否存在
                3. 存在-》不能进  不存在-》能进
                4. Yes 将用户信息存储起来
                5. 给其他人发送通知

    聊天


    退出聊天室


cookie

   代码的总分处理模式
       × 在一处接收客户端发送来的所有请求消息
       × 根据消息请求类型的不同分情况处理











